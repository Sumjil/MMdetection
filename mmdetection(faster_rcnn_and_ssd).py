# -*- coding: utf-8 -*-
"""MMdetection(Faster-RCNN and SSD)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10fLmuWJFAFie_Oi71h6MPyOi1gKmJlct
"""

# Check nvcc version
!nvcc -V
# Check GCC version
!gcc --version

# Commented out IPython magic to ensure Python compatibility.
# install dependencies: (use cu111 because colab has CUDA 11.1)
!pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html

# install mmcv-full thus we could use CUDA operators
!pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.9.0/index.html

# Install mmdetection
!rm -rf mmdetection
!git clone https://github.com/open-mmlab/mmdetection.git
# %cd mmdetection

!pip install -e .

# Check Pytorch installation
import torch, torchvision
print(torch.__version__, torch.cuda.is_available())

# Check MMDetection installation
import mmdet
print(mmdet.__version__)

# Check mmcv installation
from mmcv.ops import get_compiling_cuda_version, get_compiler_version
print(get_compiling_cuda_version())
print(get_compiler_version())

# We download the pre-trained checkpoints for inference and finetuning.
!mkdir checkpoints
!wget -c https://download.openmmlab.com/mmdetection/v2.0/faster_rcnn/faster_rcnn_r50_caffe_fpn_mstrain_3x_coco/faster_rcnn_r50_caffe_fpn_mstrain_3x_coco_20210526_095054-1f77628b.pth \
      -O checkpoints/faster_rcnn_r50_caffe_fpn_mstrain_3x_coco_20210526_095054-1f77628b.pth

!wget -c https://download.openmmlab.com/mmdetection/v2.0/faster_rcnn/faster_rcnn_r50_caffe_c4_1x_coco/faster_rcnn_r50_caffe_c4_1x_coco_20220316_150152-3f885b85.pth \
      -O checkpoints/faster_rcnn_r50_caffe_c4_1x_coco_20220316_150152-3f885b85.pth

#ssd mobelent
!wget -c https://download.openmmlab.com/mmdetection/v2.0/ssd/ssdlite_mobilenetv2_scratch_600e_coco/ssdlite_mobilenetv2_scratch_600e_coco_20210629_110627-974d9307.pth \
      -O checkpoints/ssdlite_mobilenetv2_scratch_600e_coco_20210629_110627-974d9307.pth

# ssd vgg
!wget -c https://download.openmmlab.com/mmdetection/v2.0/ssd/ssd512_coco/ssd512_coco_20210803_022849-0a47a1ca.pth \
      -O checkpoints/ssd512_coco_20210803_022849-0a47a1ca.pth

!ls checkpoints

!ls -la checkpoints

# download, decompress the data
!wget https://download.openmmlab.com/mmdetection/data/kitti_tiny.zip
!unzip kitti_tiny.zip > /dev/null

!apt-get -q install tree
!tree kitti_tiny

import mmcv
import matplotlib.pyplot as plt
from mmdet.apis import inference_detector, init_detector, show_result_pyplot

config = 'configs/ssd/ssd512_coco.py'
# Setup a checkpoint file to load
checkpoint = 'checkpoints/ssd512_coco_20210803_022849-0a47a1ca.pth'
# initialize the detector
model = init_detector(config, checkpoint, device='cuda:0' )
# Use the detector to do inference
img = mmcv.imread('kitti_tiny/training/image_2/000000.jpeg')
result = inference_detector(model, img)
result

show_result_pyplot(model, img, result, score_thr=0.0)
show_result_pyplot(model, img, result, score_thr=0.3)

img = mmcv.imread('kitti_tiny/training/image_2/000012.jpeg')
result = inference_detector(model, img)
result

show_result_pyplot(model, img, result, score_thr=0.0)
show_result_pyplot(model, img, result, score_thr=0.3)

import copy
import os.path as osp

import mmcv
import numpy as np

from mmdet.datasets.builder import DATASETS
from mmdet.datasets.custom import CustomDataset

@DATASETS.register_module()
class KittiTinyDataset(CustomDataset):

    CLASSES = ('Car', 'Pedestrian', 'Cyclist', 'Truck')

    def load_annotations(self, ann_file):
        cat2label = {k: i for i, k in enumerate(self.CLASSES)}
        # load image list from file
        image_list = mmcv.list_from_file(self.ann_file)
    
        data_infos = []
        # convert annotations to middle format
        for image_id in image_list:
            #filename = f'{self.img_prefix}/{image_id}.png'
            filename = f'{self.img_prefix}/{image_id}.jpeg'
            
            image = mmcv.imread(filename)
            height, width = image.shape[:2]
    
            #data_info = dict(filename=f'{image_id}.png', width=width, height=height)
            data_info = dict(filename=f'{image_id}.jpeg', width=width, height=height)
            # load annotations
            label_prefix = self.img_prefix.replace('image_2', 'label_2')
            lines = mmcv.list_from_file(osp.join(label_prefix, f'{image_id}.txt'))
    
            content = [line.strip().split(' ') for line in lines]
            bbox_names = [x[0] for x in content]
            bboxes = [[float(info) for info in x[4:8]] for x in content]
    
            gt_bboxes = []
            gt_labels = []
            gt_bboxes_ignore = []
            gt_labels_ignore = []
    
            # filter 'DontCare'
            for bbox_name, bbox in zip(bbox_names, bboxes):
                if bbox_name in cat2label:
                    gt_labels.append(cat2label[bbox_name])
                    gt_bboxes.append(bbox)
                else:
                    gt_labels_ignore.append(-1)
                    gt_bboxes_ignore.append(bbox)

            data_anno = dict(
                bboxes=np.array(gt_bboxes, dtype=np.float32).reshape(-1, 4),
                labels=np.array(gt_labels, dtype=np.long),
                bboxes_ignore=np.array(gt_bboxes_ignore,
                                       dtype=np.float32).reshape(-1, 4),
                labels_ignore=np.array(gt_labels_ignore, dtype=np.long))

            data_info.update(ann=data_anno)
            data_infos.append(data_info)

        return data_infos

import mmcv
from mmcv.runner import load_checkpoint
from mmcv import Config

model_type = "ssd_512"

if model_type == "faster_rcnn_1":
  cfg = mmcv.Config.fromfile('./configs/faster_rcnn/faster_rcnn_r50_caffe_fpn_mstrain_3x_coco.py') 
  cfg.device = "cuda" if torch.cuda.is_available() else "cpu"                      
elif model_type == "faster_rcnn_2":
  cfg = mmcv.Config.fromfile('./configs/faster_rcnn/faster_rcnn_r50_caffe_c4_1x_coco.py')
  cfg.device = "cuda" if torch.cuda.is_available() else "cpu"
elif model_type == "ssd_mobilenet":
  cfg = mmcv.Config.fromfile('./configs/ssd/ssdlite_mobilenetv2_scratch_600e_coco.py')
  cfg.device = "cuda" if torch.cuda.is_available() else "cpu"

elif model_type == "ssd_512":
  cfg = mmcv.Config.fromfile('./configs/ssd/ssd512_coco.py')
  cfg.device = "cuda" if torch.cuda.is_available() else "cpu"

from mmdet.apis import set_random_seed

# Modify dataset type and path
cfg.dataset_type = 'KittiTinyDataset'
cfg.data_root = 'kitti_tiny/'

cfg.data.test.type = 'KittiTinyDataset'
cfg.data.test.data_root = 'kitti_tiny/' 
cfg.data.test.ann_file = 'train.txt'
cfg.data.test.img_prefix = 'training/image_2' 


if model_type == "ssd_mobilenet":
  cfg.data.train.dataset.type = 'KittiTinyDataset'
  cfg.data.train.dataset.data_root = 'kitti_tiny/'
  cfg.data.train.dataset.ann_file = 'train.txt'
  cfg.data.train.dataset.img_prefix = 'training/image_2'
elif model_type == "faster_rcnn_1":
  cfg.data.train.dataset.type = 'KittiTinyDataset'
  cfg.data.train.dataset.data_root = 'kitti_tiny/'
  cfg.data.train.dataset.ann_file = 'train.txt'
  cfg.data.train.dataset.img_prefix = 'training/image_2'
elif model_type == "faster_rcnn_2":
  cfg.data.train.type = 'KittiTinyDataset'
  cfg.data.train.data_root = 'kitti_tiny/'
  cfg.data.train.ann_file = 'train.txt'
  cfg.data.train.img_prefix = 'training/image_2'
elif model_type == "ssd_512":
  cfg.data.train.dataset.type = 'KittiTinyDataset'
  cfg.data.train.dataset.data_root = 'kitti_tiny/'
  cfg.data.train.dataset.ann_file = 'train.txt'
  cfg.data.train.dataset.img_prefix = 'training/image_2'

cfg.data.val.type = 'KittiTinyDataset'
cfg.data.val.data_root = 'kitti_tiny/'
cfg.data.val.ann_file = 'val.txt'
cfg.data.val.img_prefix = 'training/image_2'


if model_type == "ssd_mobilenet":
  cfg.model.bbox_head.num_classes = 4
  cfg.load_from = 'checkpoints/ssdlite_mobilenetv2_scratch_600e_coco_20210629_110627-974d9307.pth'
elif model_type == "faster_rcnn_1":
  cfg.model.roi_head.bbox_head.num_classes = 4
  cfg.load_from = 'checkpoints/faster_rcnn_r50_caffe_fpn_mstrain_3x_coco_20210526_095054-1f77628b.pth'
elif model_type == "faster_rcnn_2":
  cfg.model.roi_head.bbox_head.num_classes = 4
  cfg.load_from = 'checkpoints/faster_rcnn_r50_caffe_c4_1x_coco_20220316_150152-3f885b85.pth'
elif model_type == "ssd_512":
  cfg.model.bbox_head.num_classes = 4
  cfg.load_from = 'checkpoints/ssd512_coco_20210803_022849-0a47a1ca.pth'

# Set up working dir to save files and logs. куда сохранять
cfg.work_dir = './tutorial_exps'

# The original learning rate (LR) is set for 8-GPU training.
# We divide it by 8 since we only use one GPU.



cfg.optimizer.lr = 3e-3 #0.02 / 8 
#cfg.lr_config.warmup = None
cfg.lr_config.warmup_ratio = 1.0 / 1e10
cfg.log_config.interval = 10


# Change the evaluation metric since we use customized dataset.
cfg.evaluation.metric = 'mAP'
# We can set the evaluation interval to reduce the evaluation times
cfg.evaluation.interval = 12
# We can set the checkpoint saving interval to reduce the storage cost
cfg.checkpoint_config.interval = 12

# Set seed thus the results are more reproducible
cfg.seed = 0
set_random_seed(0, deterministic=False)
cfg.gpu_ids = range(1)

# We can initialize the logger for training and have a look
# at the final config used for training
print(f'Config:\n{cfg.pretty_text}')

from mmdet.datasets import build_dataset
from mmdet.models import build_detector
from mmdet.apis import train_detector

datasets = [build_dataset(cfg.data.train)]

model = build_detector(cfg.model)
model

model.CLASSES = datasets[0].CLASSES
model.CLASSES

"""**Faster-rcnn fpn**"""

mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))
train_detector(model, datasets, cfg, distributed=False, validate=True)

imgs = [
  'kitti_tiny/001000.png','kitti_tiny/001001.png','kitti_tiny/001002.png','kitti_tiny/001003.png','kitti_tiny/001004.png',
  'kitti_tiny/001005.png','kitti_tiny/001006.png','kitti_tiny/001007.png','kitti_tiny/001008.png','kitti_tiny/001009.png',
  'kitti_tiny/001010.png','kitti_tiny/001011.png','kitti_tiny/001012.png','kitti_tiny/001013.png','kitti_tiny/001014.png',
  'kitti_tiny/001015.png','kitti_tiny/001016.png','kitti_tiny/001017.png','kitti_tiny/001018.png','kitti_tiny/001019.png',
  'kitti_tiny/001020.png','kitti_tiny/001021.png','kitti_tiny/001022.png','kitti_tiny/001023.png','kitti_tiny/001024.png',
  'kitti_tiny/001025.png','kitti_tiny/001026.png','kitti_tiny/001027.png','kitti_tiny/001028.png','kitti_tiny/001029.png',
  'kitti_tiny/001030.png','kitti_tiny/001031.png','kitti_tiny/001032.png','kitti_tiny/001033.png','kitti_tiny/001034.png',
  'kitti_tiny/001035.png','kitti_tiny/001036.png','kitti_tiny/001037.png','kitti_tiny/001038.png','kitti_tiny/001039.png',
  'kitti_tiny/001040.png','kitti_tiny/001041.png','kitti_tiny/001042.png','kitti_tiny/001043.png','kitti_tiny/001044.png',
  'kitti_tiny/001045.png','kitti_tiny/001046.png','kitti_tiny/001047.png','kitti_tiny/001048.png','kitti_tiny/001049.png',
  'kitti_tiny/001050.png','kitti_tiny/001051.png','kitti_tiny/001052.png','kitti_tiny/001053.png','kitti_tiny/001054.png',
  'kitti_tiny/001055.png','kitti_tiny/001056.png','kitti_tiny/001057.png','kitti_tiny/001058.png','kitti_tiny/001059.png',
  'kitti_tiny/001060.png','kitti_tiny/001061.png','kitti_tiny/001062.png','kitti_tiny/001063.png','kitti_tiny/001064.png',
  'kitti_tiny/001065.png','kitti_tiny/001066.png','kitti_tiny/001067.png','kitti_tiny/001068.png','kitti_tiny/001069.png',
  'kitti_tiny/001070.png','kitti_tiny/001071.png','kitti_tiny/001072.png','kitti_tiny/001073.png','kitti_tiny/001074.png',
  'kitti_tiny/001075.png','kitti_tiny/001076.png','kitti_tiny/001077.png','kitti_tiny/001078.png','kitti_tiny/001079.png',
  'kitti_tiny/001080.png','kitti_tiny/001081.png','kitti_tiny/001082.png','kitti_tiny/001083.png','kitti_tiny/001084.png',
  'kitti_tiny/001085.png','kitti_tiny/001086.png','kitti_tiny/001087.png','kitti_tiny/001088.png','kitti_tiny/001089.png',
  'kitti_tiny/001090.png','kitti_tiny/001091.png','kitti_tiny/001092.png','kitti_tiny/001093.png','kitti_tiny/001094.png',
  'kitti_tiny/001095.png','kitti_tiny/001096.png','kitti_tiny/001097.png','kitti_tiny/001098.png','kitti_tiny/001099.png',
  'kitti_tiny/001100.png'
  ]

import time
immg = []
[immg.append(mmcv.imread(img)) for img in imgs]

model.cfg = cfg

all_times = []
for x in immg:
  start_time = time.time()
  result = (inference_detector(model, x))
  result_time = (time.time() - start_time)
  all_times.append(result_time)

print(all_times)

import numpy as np
list_avg = np.mean(all_times) 

print(list_avg) 
print("Average value of the list with precision upto 3 decimal value:\n") 
print(round(list_avg,3))

list = all_times
print("List : " + str(list))

st_dev = np.std(list)

print("Standard deviation of the given list: " + str(round(st_dev,3))) # сколько в среднем отклоняеются +- стд

result = []
[ result.append(inference_detector(model, x)) for x in immg ];

show_result_pyplot(model, immg[100], result[100], score_thr=0.0)
show_result_pyplot(model, immg[100], result[100], score_thr=0.3)

config = 'configs/faster_rcnn/faster_rcnn_r50_caffe_fpn_mstrain_3x_coco.py'
checkpoint = 'checkpoints/faster_rcnn_r50_caffe_fpn_mstrain_3x_coco_20210526_095054-1f77628b.pth'
model = init_detector(config, checkpoint, device='cuda:0' )
result = []
[ result.append(inference_detector(model, x)) for x in immg ]
show_result_pyplot(model, immg[100], result[100], score_thr=0.0)
show_result_pyplot(model, immg[100], result[100], score_thr=0.3)

"""FASTER R-50-C4"""

mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))
train_detector(model, datasets, cfg, distributed=False, validate=True)

immg = []
[immg.append(mmcv.imread(img)) for img in imgs]

model.cfg = cfg

all_times = []
for x in immg:
  start_time = time.time()
  result = (inference_detector(model, x))
  #result_time = (time.time() - start_time)*1000
  result_time = (time.time() - start_time)
  all_times.append(result_time)

print(all_times)

list_avg = np.mean(all_times) 
print(list_avg) 
print("Average value of the list with precision upto 3 decimal value:\n") 
print(round(list_avg,3))

list = all_times
print("List : " + str(list))

st_dev = np.std(list)

print("Standard deviation of the given list: " + str(round(st_dev,3))) # сколько в среднем отклоняеются +- стд

result = []
[ result.append(inference_detector(model, x)) for x in immg ];

show_result_pyplot(model, immg[100], result[100], score_thr=0.0)
show_result_pyplot(model, immg[100], result[100], score_thr=0.3)

config = ('configs/faster_rcnn/faster_rcnn_r50_caffe_c4_1x_coco.py')
# Setup a checkpoint file to load
checkpoint = 'checkpoints/faster_rcnn_r50_caffe_c4_1x_coco_20220316_150152-3f885b85.pth'
# initialize the detector
model = init_detector(config, checkpoint, device='cuda:0' )
result = []
[ result.append(inference_detector(model, x)) for x in immg ]
show_result_pyplot(model, immg[100], result[100], score_thr=0.0)
show_result_pyplot(model, immg[100], result[100], score_thr=0.3)

"""ssd_mobilenet"""

mmcv.mkdir_or_exist(osp.abspath(cfg.work_dir))
train_detector(model, datasets, cfg, distributed=False, validate=True)

img = mmcv.imread('kitti_tiny/000970.png')

model.cfg = cfg
result = inference_detector(model, img)
result

show_result_pyplot(model, img, result, score_thr=0.0)
show_result_pyplot(model, img, result, score_thr=0.3)

config = ('configs/ssd/ssdlite_mobilenetv2_scratch_600e_coco.py')
# Setup a checkpoint file to load
checkpoint = 'checkpoints/ssdlite_mobilenetv2_scratch_600e_coco_20210629_110627-974d9307.pth'
# initialize the detector
model = init_detector(config, checkpoint, device='cuda:0' )
# Use the detector to do inference
img = mmcv.imread('kitti_tiny/000970.png')
result = inference_detector(model, img)
result

show_result_pyplot(model, img, result, score_thr=0.0)
show_result_pyplot(model, img, result, score_thr=0.3)